(function() {
    angular.module("dashboard-app", [
        "ngCookies",
        "ngStorage",
        "ngAnimate",
        "ngAudio",
        "angularScreenfull",
        "ui.bootstrap.datetimepicker",
        "as.sortable",
        "ui.checkbox"]);
})();
(function () {
    "use strict";

    dashboardController.$inject = ["$scope", "$localStorage", "$http", "$interval", "$timeout", "$attrs"];
    angular.module("dashboard-app")
        .controller("dashboardController", dashboardController);

    function dashboardController($scope, $localStorage, $http, $interval, $timeout, $attrs) {
        var vm = this;
        vm.isBusy = true;
        vm.canPost = false;
        vm.watcherCount = 0;

        vm.errorMessage = "";
        // 30 minutes
        vm.refreshTime = 30 * 60 * 1000;
        vm.stopwatchReset = {};

        vm.startFade = false;
        vm.fadeAndRefresh = function () {
            vm.startFade = true;
            $timeout(function () {
                vm.startFade = false;
                vm.refresh();
            }, 1000);
        };

        vm.showTimer = function (selector) {
            // reset stopwatch if its working
            if (selector !== "stopwatch") {
                vm.stopwatchReset();
            }
            vm.settings.activeTimer = selector;
            vm.settings.showTimers = true;
            $('.ssm-overlay').click();
        };

        vm.getNextElementIndex = function (array, index) {
            index = index + 1;
            if (index >= array.length) index = 0;
            return index;
        };

        vm.saveLocalSettings = function () {
            $localStorage.settings = vm.settings;
        };

        vm.saveDashboard = function () {
            var expireDate = new Date();
            expireDate.setTime(expireDate.getTime() + vm.refreshTime);

            $localStorage.expireDate = expireDate;
            $localStorage.dashboard = vm.dashboard;

            
        };

        // GET dashboard
        vm.getDashboard = function () {
            vm.isBusy = true;
            var offsetMins = new Date().getTimezoneOffset();
            // var localMilliseconds = Date.now() - offsetMins * 60 * 1000;
            // $http.get("/api/dashboard/" + localMilliseconds)

            var url = "/api/dashboard-public";
            if ($attrs.username) {
                url = "/api/dashboard";
            }
            
            $http.get(url)
                .then(
                    function (response) {
                        // on sucess
                        vm.dashboard = response.data;

                        vm.dashboard.quoteIndex = vm.getNextElementIndex(vm.dashboard.quotes, 0);
                        vm.dashboard.quote = vm.dashboard.quotes[vm.dashboard.quoteIndex];

                        vm.dashboard.photoIndex = vm.getNextElementIndex(vm.dashboard.photos, 0);
                        vm.dashboard.photo = vm.dashboard.photos[vm.dashboard.photoIndex];

                        // truncate photo names
                        for (var i = 0; i < vm.dashboard.photos.length; i++) {
                            var name = vm.dashboard.photos[i].name;
                            vm.dashboard.photos[i].shortName = name;
                            if (name.length > 20) {
                                vm.dashboard.photos[i].shortName = name.replace(/^(.{20}[^\s]*).*/, "$1");
                                if (vm.dashboard.photos[i].shortName.length < (name.length + 3)) {
                                    vm.dashboard.photos[i].shortName = vm.dashboard.photos[i].shortName + "...";
                                }
                            }
                        }

                        if (vm.dashboard.weather) {
                            if (!vm.settings.location) {
                                vm.settings.location = vm.dashboard.weather.location;
                            }
                            if (!vm.settings.temperatureUnits) {
                                vm.settings.temperatureUnits = "celsius";
                                if (vm.dashboard.weather.usesFahrenheit) {
                                    vm.settings.temperatureUnits = "fahrenheit";
                                }
                            }
                        }
                        vm.dashboard.greeting = getGreeting();

                        vm.saveDashboard();
                    },
                    function (error) {
                        // on failure
                        vm.errorMessage = "Failed to load data: " + error.statusText;
                    })
                    .finally(function () {
                        vm.isBusy = false;
                    });
        }

        vm.refresh = function () {
            if (!vm.dashboard || (vm.expireDate < new Date())) {
                vm.getDashboard();
            } else {
                vm.dashboard.quoteIndex = vm.getNextElementIndex(vm.dashboard.quotes, vm.dashboard.quoteIndex);
                vm.dashboard.quote = vm.dashboard.quotes[vm.dashboard.quoteIndex];

                vm.dashboard.photoIndex = vm.getNextElementIndex(vm.dashboard.photos, vm.dashboard.photoIndex);
                vm.dashboard.photo = vm.dashboard.photos[vm.dashboard.photoIndex];

                vm.saveDashboard();

                vm.isBusy = false;
            }

            if (vm.dashboard) {
                vm.dashboard.greeting = getGreeting();
            }
        };

        // GET settings
        vm.getSettings = function () {
            
            $http.get("/api/settings")
                     .then(
                         function (response) {
                             // expect response.data.defaultQuestion != null or we have received a "corrupted" saved object
                             if ((response.data) && (response.data.defaultQuestion)) {
                                 vm.settings = angular.merge({}, vm.getDefaultSettings(), response.data);
                                 vm.settings.canSync = true;
                             }
                             vm.init();
                         },
                         function (error) {
                             vm.errorMessage = "Failed to load settings: " + error.statusText;
                         })
                         .finally(function () {
                         });
        };

        vm.getDefaultSettings = function () {
            return {
                defaultQuestion: "What is your goal for today?",
                question: "What is your goal for today?",
                answer: "",
                location: "",
                showBackgroundPhoto: true,
                showFocus: true,
                showWeather: true,
                temperatureUnits: "",
                showQuote: true,
                showTodo: false,

                showTimers: true,
                clockFormat: "12-hour",
                activeTimer: "clock",
                volumeOn: true,

                timerMinutesSelection: 5,
                timerSecondsSelection: 0,

                pomodoroTime: 25,
                pomodoroShortBreak: 5,
                pomodoroLongBreak: 15,
                pomodoroTaskPlaceholder: "What task are you working on?",
                pomodoroTaskDescription: "What task are you working on?",
                pomodoroTotal: 0,

                countdown: {
                    eventPlaceholder: "Event Name...",
                    eventDescription: "Event Name...",
                    endDate: new Date(),
                    started: false
                },

                todo: {
                    category: 0,
                    categories: ["Work", "Personal", "Make a difference"],
                    todos: []
                },

                greeting: {
                    show: true,
                    defaultName: "Young Grasshopper",
                    name: "Young Grasshopper",
                    randomName: false,
                    names: "Champion, Winner, Lucky, Fighter, Rock Star",
                    namesPlaceholder: "Comma separated names e.g Champion, Winner, Lucky",
                },

                canSync: false
            };
        };

        vm.getLocalSettings = function () {
            var settings = $localStorage.settings;

            // http://davidcai.github.io/blog/posts/copy-vs-extend-vs-merge/
            if (settings) {
                return angular.merge({}, vm.getDefaultSettings(), settings);
            }
            else {
                return vm.getDefaultSettings();
            }
        };

        vm.postSettings = function () {
            // console.log('Posting settings');

            $http.post("/api/settings", vm.settings)
                  .then(
                      function (response) {
                          
                      },
                      function (error) {
                          // on failure
                          vm.errorMessage = "Failed to post settings data: " + error.statusText;
                      })
                      .finally(function () {
                      });
        };

        vm.init = function() 
        {
            // load dashboard and setup the interval to refresh it every 30 mins
            vm.dashboard = $localStorage.dashboard;
            $interval(vm.getDashboard, vm.refreshTime);
         
            vm.refresh();

            // watch for changes
            $scope.$watch("[vm.settings]", function () {
                vm.saveLocalSettings();

                if (($attrs.username) && (vm.watcherCount > 0)) {
                    vm.postSettings();
                }
                vm.watcherCount = vm.watcherCount + 1;
            }, true);
        }
        
        // user is logged in
        if ($attrs.username) {
            vm.getSettings();
        }
        else {
            vm.settings = vm.getLocalSettings();

            // keep the sync logic simple: if user registered an account but currently is not logged in then force him to log in
            if (vm.settings.canSync) {
                window.location.href = "/Account/Login";
            }

            vm.init();
        }

        vm.canPost = true;
    }

    function getGreeting() {
        var hours = new Date().getHours();

        if (hours >= 5 && hours < 12) {
            return "Good morning";
        }
        if (hours >= 12 && hours < 17) {
            return "Good afternoon";
        }
        if (hours >= 17) {
            return "Good evening";
        }
    }
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("clock",
        ["$interval", "dateFilter", function ($interval, dateFilter) {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: '/app/dashboard/clock/clock.html',

            scope: {
                format: "=format"
            },

            link: function (scope, element, attrs) {
                var setTimeFormat = function () {
                    if (scope.format === "12-hour") {
                        scope.timeFormat = "h:mm";
                    }
                    else
                        if (scope.format === "24-hour") {
                            scope.timeFormat = "HH:mm";
                        }
                }
                setTimeFormat();

                // toggle time format
                element.bind("click", function () {
                    if (scope.format === "12-hour") {
                        scope.format = "24-hour";
                    }
                    else
                        if (scope.format === "24-hour") {
                            scope.format = "12-hour";
                        }
                    setTimeFormat();
                    scope.$apply();
                });

                var tick = function () {
                    scope.time = Date.now();
                }
                tick();

                var timeoutId = $interval(tick, 1 * 60 * 1000);

                element.on("$destroy", function () {
                    $interval.cancel(timeoutId);
                });
            }
        };
    }]);
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("countdown", ["$interval", "ngAudio", function ($interval, ngAudio) {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: "/app/dashboard/countdown/countdown.html",

            scope: {
                settings: "="
            },

            link: function(scope, element, attrs) {
                scope.promise = {};
                scope.time = {};
                var seconds;
                scope.settings.endDate = moment(scope.settings.endDate);

                var calcSeconds = function() {
                    seconds = 0;

                    var now = new Date();
                    if (scope.settings.endDate > now) {
                        seconds = (scope.settings.endDate - now) / 1000;
                    }
                };

                var updateTime = function() {
                    var zeroTime = {
                        'days': 0,
                        'hours': 0,
                        'minutes': 0,
                        'seconds': 0
                    }
                    if (!scope.settings.endDate) {
                        scope.time = zeroTime;
                        return;
                    }

                    var distance = moment(scope.settings.endDate) - new Date();
                    if (distance < 0) {
                        scope.time = zeroTime;
                        return;
                    }

                    var _second = 1000;
                    var _minute = _second * 60;
                    var _hour = _minute * 60;
                    var _day = _hour * 24;

                    // http://www.sitepoint.com/build-javascript-countdown-timer-no-dependencies/
                    var days = Math.floor(distance / _day);
                    var hours = Math.floor((distance % _day) / _hour);
                    var minutes = Math.floor((distance % _hour) / _minute);
                    var secs = Math.floor((distance % _minute) / _second);

                    scope.time = {
                        "days": days,
                        "hours": hours,
                        "minutes": minutes,
                        "seconds": secs
                    };
                };

                var tick = function() {
                    seconds = seconds - 1;
                    if (seconds <= 0) {
                        scope.settings.started = false;
                        scope.reset();
                    } else {
                        updateTime();
                    }
                }

                // toggle start/pause
                scope.start = function () {
                    $interval.cancel(scope.promise);
                    scope.promise = 0;

                    if (scope.startText === "PAUSE") {
                        scope.settings.started = false;
                        scope.startText = "START";
                    } else if (scope.startText === "START") {
                        calcSeconds();
                        if (seconds > 0) {
                            scope.settings.started = true;
                            scope.startText = "PAUSE";
                            scope.promise = $interval(tick, 1 * 1000);
                        }
                    }
                };

                scope.reset = function () {
                    $interval.cancel(scope.promise);
                    scope.promise = 0;
                    seconds = 0;
                    updateTime();
                    scope.startText = "START";
                };
                scope.reset();

                // autostart if not reached endDate yet
                calcSeconds();
                if (scope.settings.started) {
                    if (seconds > 0) {
                        scope.start();
                    }
                }

                var timeElements = element[0].querySelectorAll('.times');
                for (var index = 0; index < timeElements.length; ++index) {
                    var ele = angular.element(timeElements[index]);
                    ele.bind("click",
                        function () {
                            scope.start();
                        });
                }

                element.on("$destroy", function () {
                    $interval.cancel(scope.promise);
                });
            }
        };
    }]);
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("focus", function () {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: '/app/dashboard/focus/focus.html',

            link: function(scope, element, attrs) {
            }
        };
    });
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("greeting", function () {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: '/app/dashboard/greeting/greeting.html',

            scope: {
                settings: "=",
                text: "=",
            },

            link: function(scope, element, attrs) {
                scope.name = "";

                if (scope.settings.names) {
                    var names = scope.settings.names.split(",");
                    scope.name = getRandomElement(names);
                }

                function getRandomElement(arr) {
                    var index = Math.floor(Math.random() * ((arr.length - 1) - 0 + 1)) + 0;
                    return arr[index];
                }
            }
        };
    });
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("photo", function () {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: '/app/dashboard/photo/photo.html',

            link: function(scope, element, attrs) {
                $(element).popover({
                    html: "true",
                    placement: "top",
                    trigger: "hover",
                    content: function () {
                        return $("#photo-popover").html();
                    }
                });
            }
        };
    });
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("pomodoro", ["$interval", "ngAudio", function ($interval, ngAudio) {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: "/app/dashboard/pomodoro/pomodoro.html",

            scope: {
                pomodoroTime: "=",
                shortBreak: "=",
                longBreak: "=",
                taskDescription: "=",
                taskPlaceholder: "=",
                total: "=",
                volumeOn: "=volumeOn"
            },

            link: function (scope, element, attrs) {
                // states: 1 pomodoro, 2 short break, 3 long break
                var state = 1;

                scope.promise = {};
                var seconds;
                var audioStartPomodoro = ngAudio.load("/sounds/start.wav");
                //var audioStartBreak = ngAudio.load("/sounds/finish1.wav");

                scope.startPomodoro = function () {
                    state = 1;
                    scope.reset();
                    scope.start();
                };

                scope.startShortBreak = function () {
                    state = 2;
                    scope.reset();
                    scope.start();
                };

                scope.startLongBreak = function () {
                    state = 3;
                    scope.reset();
                    scope.start();
                };

                var calcSeconds = function () {
                    if (state === 1) {
                        seconds = scope.pomodoroTime * 60;
                    }
                    else
                        if (state === 2) {
                            seconds = scope.shortBreak * 60;
                        }
                        else
                            if (state === 3) {
                                seconds = scope.longBreak * 60;
                            }
                };

                var updateTime = function () {
                    var date = new Date(null);
                    date.setSeconds(seconds);

                    if (seconds >= 3600) {
                        scope.time = date.toISOString().substr(11, 8);
                    }
                    else
                        if (seconds >= 60) {
                            scope.time = date.toISOString().substr(14, 5);
                        }
                        else
                            if (seconds < 60) {
                                scope.time = date.toISOString().substr(17, 2);
                            }
                };

                var finished = function () {
                    if (state === 1) {
                        scope.total = scope.total + 1;
                        if (scope.volumeOn) {
                            audioStartPomodoro.play();
                        }
                    }
                }

                var tick = function () {
                    seconds = seconds - 1;
                    if (seconds <= 0) {
                        finished();
                        scope.reset();
                    } else {
                        updateTime();
                    }
                }

                // toggle start/pause
                scope.start = function () {
                    $interval.cancel(scope.promise);
                    scope.promise = 0;

                    if (scope.startText === "PAUSE") {
                        scope.startText = "START";
                    }
                    else if (scope.startText === "START") {
                        if (seconds > 0) {
                            scope.startText = "PAUSE";
                            scope.promise = $interval(tick, 1 * 1000);
                        }
                    }
                };

                scope.reset = function () {
                    $interval.cancel(scope.promise);
                    scope.promise = 0;
                    calcSeconds();
                    updateTime();
                    scope.startText = "START";
                };
                scope.reset();

                var timeElement = angular.element(element[0].querySelector('.time'));
                timeElement.bind("click", function () {
                    scope.start();
                });

                element.on("$destroy", function () {
                    $interval.cancel(scope.promise);
                });
            }
        };
    }]);
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("quote", function () {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: '/app/dashboard/quote/quote.html',

            link: function(scope, element, attrs) {
                $(element).popover({
                    html: "true",
                    placement: "top",
                    trigger: "hover",
                    content: function () {
                        return $("#quote-popover").html();
                    }
                });
            }
        };
    });
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("settings", function () {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: '/app/dashboard/settings/settings.html',

            scope: {
                weather: "=",
                settings: "=",
                username: "@"
            },

            link: function (scope, element, attrs) {
                var i;
                scope.workCollection = [];
                for (i = 10; i <= 60; i++) {
                    scope.workCollection.push(i);
                }

                scope.shortBreakCollection = [];
                for (i = 1; i <= 30; i++) {
                    scope.shortBreakCollection.push(i);
                }

                scope.longBreakCollection = [];
                for (i = 1; i <= 30; i++) {
                    scope.longBreakCollection.push(i);
                }

                // to stop the dropdown closing when clicking on a pill
                // http://stackoverflow.com/questions/21525440/twitter-bootstrap-dropdown-with-tabs-inside
                $('.dropdown-menu a[data-toggle="pill"]')
                    .click(function (e) {
                        e.stopPropagation();
                        $(this).tab("show");
                    });
            }
        };
    });
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("sidebar", function () {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: '/app/dashboard/sidebar/sidebar.html',

            link: function (scope, element, attrs) {
                $(document).ready(function () {
                    $('nav').slideAndSwipe();
                });
            }
        };
    });
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("stopwatch", ["$interval", function ($interval) {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: '/app/dashboard/stopwatch/stopwatch.html',

            scope: {
                reset: "="
            },

            link: function (scope, element, attrs) {
                scope.promise = {};
                var seconds = 0;

                var tick = function () {
                    seconds = seconds + 1;
                    var date = new Date(null);
                    date.setSeconds(seconds);
                    scope.time = date.toISOString().substr(11, 8);
                }

                // toggle start/pause
                scope.start = function () {
                    $interval.cancel(scope.promise);
                    scope.promise = 0;

                    if (scope.startText === "PAUSE") {
                        scope.startText = "START";
                    }
                    else if (scope.startText === "START") {
                        scope.startText = "PAUSE";
                        scope.promise = $interval(tick, 1 * 1000);
                    }
                };

                scope.reset = function () {
                    $interval.cancel(scope.promise);
                    scope.promise = 0;
                    seconds = 0;
                    scope.time = "00:00:00";
                    scope.startText = "START";
                };

                scope.reset();

                var timeElement = angular.element(element[0].querySelector('.time'));
                timeElement.bind("click", function () {
                    scope.start();
                });

                element.on("$destroy", function () {
                    $interval.cancel(scope.promise);
                });
            }
        };
    }]);
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("timer", ["$interval", "ngAudio", function ($interval, ngAudio) {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: '/app/dashboard/timer/timer.html',

            scope: {
                minutesSelection: "=minutesSelection",
                secondsSelection: "=secondsSelection",
                volumeOn: "=volumeOn"
            },

            link: function (scope, element, attrs) {
                scope.minutesCollection = ["mins"];
                for (var i = 0; i <= 90; i++) {
                    scope.minutesCollection.push(i);
                }
                scope.secondsCollection = ["secs", 0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60];

                scope.promise = {};
                var seconds;
                var audio = ngAudio.load("/sounds/alarm_beep.wav");

                var calcSeconds = function () {
                    seconds = 0;
                    if (angular.isNumber(scope.minutesSelection)) {
                        seconds = seconds + scope.minutesSelection * 60;
                    }
                    if (angular.isNumber(scope.secondsSelection)) {
                        seconds = seconds + scope.secondsSelection;
                    }
                };

                var updateTime = function () {
                    var date = new Date(null);
                    date.setSeconds(seconds);
                    if (seconds >= 3600) {
                        scope.time = date.toISOString().substr(11, 8);
                    }
                    else
                    if (seconds >= 60) {
                        scope.time = date.toISOString().substr(14, 5);
                    }
                    else
                        if (seconds < 60) {
                            scope.time = date.toISOString().substr(17, 2);
                        }
                };

                var tick = function () {
                    seconds = seconds - 1;
                    if (seconds <= 0) {
                        if (scope.volumeOn) {
                            audio.play();
                        }
                        scope.reset();
                    } else {
                        updateTime();
                    }
                }

                // toggle start/pause
                scope.start = function () {
                    $interval.cancel(scope.promise);
                    scope.promise = 0;

                    if (scope.startText === "PAUSE") {
                        scope.startText = "START";
                    }
                    else if (scope.startText === "START") {
                        if (seconds > 0) {
                            scope.startText = "PAUSE";
                            scope.promise = $interval(tick, 1 * 1000);
                        }
                    }
                };

                scope.reset = function () {
                    $interval.cancel(scope.promise);
                    scope.promise = 0;
                    calcSeconds();
                    updateTime();
                    scope.startText = "START";
                };
                scope.reset();

                var timeElement = angular.element(element[0].querySelector('.time'));
                timeElement.bind("click", function () {
                    scope.start();
                });

                element.on("$destroy", function () {
                    $interval.cancel(scope.promise);
                });
            }
        };
    }]);
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("weather", function () {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: "/app/dashboard/weather/weather.html",

            link: function (scope, element, attrs) {
                $(element).popover({
                    html: "true",
                    placement: "top",
                    trigger: "hover",
                    content: function () {
                        return $("#weather-popover").html();
                    }
                });
            }
        };
    });
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("todo", function () {
        return {
            restrict: "E",
            replace: "true",

            templateUrl: "/app/dashboard/todo/todo.html",

            scope: {
                settings: "="
            },

            link: function (scope, element, attrs) {
                if (scope.settings.category) {
                    $('#todo-pills a[href="#tab' + scope.settings.category + '"]').tab("show");
                }

                scope.todos = scope.settings.todos;

                scope.addTodo = function () {
                    if (scope.todoText) {
                        scope.todos.push(
                        {
                            category: scope.settings.category,
                            date: new Date(),
                            text: scope.todoText,
                            done: false
                        });
                        scope.todoText = "";
                    }
                };

                scope.remaining = function () {
                    var count = 0;
                    angular.forEach(scope.todos, function (todo) {
                        if (scope.settings.category === 0) {
                            count += todo.done ? 0 : 1;
                        }
                        else
                            if (scope.settings.category === todo.category) {
                                count += todo.done ? 0 : 1;
                            }
                    });
                    return count;
                };

                scope.total = function () {
                    if (scope.settings.category === 0) {
                        return scope.todos.length;
                    }

                    var count = 0;
                    angular.forEach(scope.todos, function (todo) {
                        if (scope.settings.category === todo.category) {
                            count += 1;
                        }
                    });

                    return count;
                };

                scope.archive = function () {
                    var oldTodos = scope.todos;
                    scope.todos = [];
                    angular.forEach(oldTodos, function (todo) {
                        if (!todo.done) scope.todos.push(todo);
                    });
                };

                scope.remove = function(todo) {
                    var index = jQuery.inArray(todo, scope.todos);
                    if (index > -1) {
                        scope.todos.splice(index, 1);
                    }
                }

                scope.filter = function (todo) {
                    if (scope.settings.category === 0) return true;
                    return todo.category === scope.settings.category;
                };

                scope.dragControlListeners = {
                    accept: function (sourceItemHandleScope, destSortableScope) { return true },
                    itemMoved: function (event) { },
                    orderChanged: function (event) { },
                    containment: "#todos",
                    clone: false,
                    allowDuplicates: false
                };
            }
        };
    });
})();
(function () {
    "use strict";

    var app = angular.module("dashboard-app");

    app.directive("contenteditable", function () {
        return {
            restrict: "A",
            require: "ngModel",
            link: function (scope, element, attrs, ngModel) {
                function read() {
                    var html = element.html();
                    html = html.replace(/&nbsp;/g, "\u00a0");
                    ngModel.$setViewValue(html);
                }

                ngModel.$render = function () {
                    element.html(ngModel.$viewValue || "");
                };

                element.bind("keyup change", function () {
                    scope.$apply(read);
                });

                // make sure that empty string will set the default name
                element.bind("blur", function () {
                    var value = ngModel.$viewValue.trim();

                    // <BR> is added automaticall by Firefox
                    if ((!value) || (value === "<br>") || (value === "<BR>")) {
                        value = attrs.defaultvalue;
                        ngModel.$setViewValue(value);
                        ngModel.$render();
                    }
                    scope.$apply(read);
                });

                // prevent Enter key
                element.bind("keydown keypress", function (event) {
                    // erase the default value when start typing
                    var value = ngModel.$viewValue.trim();
                    if (value === attrs.defaultvalue) {
                        ngModel.$setViewValue("");
                        ngModel.$render();
                    };

                    // http://stackoverflow.com/questions/17470790/how-to-use-a-keypress-event-in-angularjs
                    var key = typeof event.which === "undefined" ? event.keyCode : event.which;
                    if (key === 13) {
                        element.blur();
                        event.preventDefault();
                    }
                });

                $(element).focusout(function () {
                    var element = $(this);
                    if (!element.text().replace(" ", "").length) {
                        element.empty();
                    }
                });
            }
        };
    });
})();